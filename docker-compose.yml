services:
  traefik:
    image: traefik:v3.3
    container_name: traefik
    env_file:
      - traefik.env
    environment:
      - TZ=Europe/Paris
      - NAS_NAME=${MAIN_NAS}
    network_mode: "host"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /data/traefik:/data
      - /home/cert-syno/cert:/syno:ro,uid=1001,gid=1001
      - ./traefik/traefik_dynamic.yaml:/etc/traefik/traefik_dynamic.yaml
    command: 
      - "--api.dashboard=true"
      - "--metrics.prometheus=true" 
      - "--log.level=INFO"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.file.filename=/etc/traefik/traefik_dynamic.yaml"
      - "--accesslog=true"
      - "--accesslog.filepath=/data/traefik.log"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web.http.redirections.entryPoint.permanent=true"
      - "--entrypoints.websecure.address=:443"
      # trust Cloudflare IPs
      - "--entrypoints.websecure.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/13,104.24.0.0/14,172.64.0.0/13,131.0.72.0/22,2400:cb00::/32,2606:4700::/32,2803:f800::/32,2405:b500::/32,2405:8100::/32,2a06:98c0::/29,2c0f:f248::/32"
      - "--entrypoints.websecure.http.tls.certresolver=cloudflare_main"
      - "--entrypoints.websecure.http.tls.domains[0].main=${MAIN_DOMAIN}"
      - "--entrypoints.websecure.http.tls.domains[0].sans=*.${MAIN_DOMAIN}"
      - "--entrypoints.websecure.http.tls.domains[1].main=*.internal.${MAIN_DOMAIN}"
      - "--certificatesResolvers.cloudflare_main.acme.email=${CLOUDFLARE_EMAIL}"
      - "--certificatesResolvers.cloudflare_main.acme.storage=/data/acme/acme.json"
      - "--certificatesResolvers.cloudflare_main.acme.dnsChallenge.provider=cloudflare"
      - "--certificatesResolvers.cloudflare_main.acme.dnsChallenge.propagation.delayBeforeChecks=120"
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.justAdummyService.loadbalancer.server.port=1337"
      - "traefik.http.routers.traefik.rule=Host(`traefik.internal.${MAIN_DOMAIN}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=cloudflare_main"
      - "traefik.http.routers.traefik.tls.domains[0].main=internal.${MAIN_DOMAIN}"
      - "traefik.http.routers.traefik.tls.domains[0].sans=*.internal.${MAIN_DOMAIN}"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.middlewares=tailscaleAL"
      - "traefik.http.middlewares.tailscaleAL.ipAllowList.sourcerange=100.64.0.0/10, fd7a:115c:a1e0::/96, 172.16.0.0/12"
      - homepage.group=Main
      - homepage.name=Traefik
      - homepage.icon=traefik.png
      - homepage.href=https://traefik.internal.${MAIN_DOMAIN}
      - homepage.description=Traefik
      - homepage.widget.type=traefik
      - homepage.widget.url=https://traefik.internal.${MAIN_DOMAIN}
    restart: unless-stopped

  homepage:
    image: ghcr.io/gethomepage/homepage:latest
    container_name: homepage
    environment:
      - HOMEPAGE_ALLOWED_HOSTS=home.${MAIN_DOMAIN}
    volumes:
      - /data/homepage:/app/config
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.homepage.rule=Host(`home.${MAIN_DOMAIN}`)"
      - "traefik.http.routers.homepage.entrypoints=websecure"
      - "traefik.http.routers.homepage.tls.certresolver=cloudflare_main"
      - "traefik.http.routers.homepage.middlewares=forwardAuth-authentik"
    restart: unless-stopped

  portainer:
    container_name: portainer
    image: portainer/portainer-ce:sts
    restart: unless-stopped
    #ports:
    #  - '9000:9000'
    volumes:
      - /data/portainer:/data:uid=1000,gid=994
    networks:
      - my-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.rule=Host(`portainer.internal.${MAIN_DOMAIN}`)"
      - "traefik.http.routers.portainer.entrypoints=websecure"
      - "traefik.http.routers.portainer.tls.certresolver=cloudflare_main"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
      - "traefik.http.routers.portainer.middlewares=tailscaleAL"
      - homepage.group=Main
      - homepage.name=Portainer
      - homepage.icon=portainer.png
      - homepage.description=Portainer
      - homepage.href=https://portainer.internal.${MAIN_DOMAIN}
      - homepage.widget.type=portainer
      - homepage.widget.url=https://portainer.internal.${MAIN_DOMAIN}
      - homepage.widget.env=3
      - homepage.widget.key=${PORTAINER_TOKEN}

  speedtest-tracker:
    container_name: speedtest-tracker
    image: lscr.io/linuxserver/speedtest-tracker:latest
    restart: unless-stopped
    volumes:
      - /data/speedtest-tracker:/config
    env_file:
      - speedtest-tracker.env
    environment:
      - TZ=Europe/Paris
      - DISPLAY_TIMEZONE=Europe/Paris
      - PUID=1000
      - PGID=994
      - DB_CONNECTION=pgsql
      - DB_HOST=postgres
      - DB_DATABASE=speedtest_trackerdb
      - DB_USERNAME=speedtest_tracker
      - SPEEDTEST_SCHEDULE="10 */2 * * *"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.speedtest-tracker.rule=Host(`speedtest-tracker.internal.${MAIN_DOMAIN}`)"
      - "traefik.http.routers.speedtest-tracker.entrypoints=websecure"
      - "traefik.http.routers.speedtest-tracker.tls.certresolver=cloudflare_main"
      - "traefik.http.services.speedtest-tracker.loadbalancer.server.port=80"
      - "traefik.http.routers.speedtest-tracker.middlewares=tailscaleAL"
      - homepage.group=Main
      - homepage.name=Speedtest Tracker
      - homepage.icon=librespeed.png
      - homepage.description=Speedtest Tracker
      - homepage.href=https://speedtest-tracker.internal.${MAIN_DOMAIN}
      - homepage.widget.type=speedtest
      - homepage.widget.url=https://speedtest-tracker.internal.${MAIN_DOMAIN}
    networks:
      - my-net
    
  netalertx:
    container_name: NetAlertX
    hostname: NetAlertX
    privileged: true
    image: jokobsk/netalertx:latest
    environment:
      - TZ=Europe/Paris
    restart: unless-stopped
    volumes:
      - /data/netalertx/db:/app/db
      - /data/netalertx/config:/app/config
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.netalertx.rule=Host(`netalertx.internal.${MAIN_DOMAIN}`)"
      - "traefik.http.routers.netalertx.entrypoints=websecure"
      - "traefik.http.routers.netalertx.tls.certresolver=cloudflare_main"
      - "traefik.http.services.netalertx.loadbalancer.server.port=20211"
      - "traefik.http.routers.netalertx.middlewares=tailscaleAL"
      - homepage.group=Main
      - homepage.name=NetAlertX
      - homepage.icon=netalertx.png
      - homepage.description=NetAlertX
      - homepage.href=https://netalertx.internal.${MAIN_DOMAIN}
      - homepage.widget.type=netalertx
      - homepage.widget.url=https://netalertx.internal.${MAIN_DOMAIN}
    network_mode: host

  glances:
    image: nicolargo/glances:dev
    container_name: glances
    restart: unless-stopped
    pid: host
    privileged: true
    network_mode: "host"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    environment:
      - TZ=Europe/Paris
      - GLANCES_OPT=-w
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.glances.rule=Host(`glances.internal.${MAIN_DOMAIN}`)"
      - "traefik.http.routers.glances.entrypoints=websecure"
      - "traefik.http.routers.glances.tls.certresolver=cloudflare_main"
      - "traefik.http.services.glances.loadbalancer.server.port=61208"
      - "traefik.http.routers.glances.middlewares=tailscaleAL"
      - homepage.group=Main
      - homepage.name=Glances
      - homepage.icon=glances.png
      - homepage.description=Glances
      - homepage.href=https://glances.internal.${MAIN_DOMAIN}
      - homepage.widget.type=glances
      - homepage.widget.url=https://glances.internal.${MAIN_DOMAIN}
      - homepage.widget.version=4
      - homepage.widget.metric=info #,cpu,memory,process
  endlessh:
    container_name: endlessh
    image: harshavardhanj/endlessh:latest
    ports:
    # TODO: change 222 to 22 when i'll have changed the ssh port on the server
    - '22222:2222'
    restart: unless-stopped
    networks:
      - my-net
  portainer_agent:
    container_name: portainer_agent
    image: portainer/agent:2.28.1
    restart: unless-stopped
    #ports:
    #  - 9001:9001
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /docker_data/volumes:/var/lib/docker/volumes
    networks:
      - my-net
  watchtower:
    container_name: watchtower
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      TZ: Europe/Paris
      WATCHTOWER_CLEANUP: true
      DOCKER_API_VERSION: 1.45
      WATCHTOWER_SCHEDULE: 0 0 5 * * *
      WATCHTOWER_TIMEOUT: 5m
      WATCHTOWER_HTTP_API_METRICS: true
      WATCHTOWER_HTTP_API_TOKEN: ${WATCHTOWER_TOKEN}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.watchtower.rule=Host(`watchtower.internal.${MAIN_DOMAIN}`)"
      - "traefik.http.routers.watchtower.entrypoints=websecure"
      - "traefik.http.routers.watchtower.tls.certresolver=cloudflare_main"
      - "traefik.http.routers.watchtower.middlewares=tailscaleAL" 
      - homepage.group=Main
      - homepage.name=Watchtower
      - homepage.icon=watchtower.png
      - homepage.description=Watchtower
      - homepage.widget.type=watchtower
      - homepage.widget.url=https://watchtower.internal.${MAIN_DOMAIN}
      - homepage.widget.key=${WATCHTOWER_TOKEN}
    restart: unless-stopped
    networks:
      - my-net
  cloudflare-ddns:
    image: timothyjmiller/cloudflare-ddns:latest
    container_name: cloudflare-ddns
    security_opt:
      - no-new-privileges:true
    network_mode: "host"
    environment:
      - PUID=1000
      - PGID=994
    volumes:
      - /data/cloudflareddns/config.json:/config.json
    restart: unless-stopped
  tailscale-cloudflare-dnssync:
    image: ghcr.io/lifeismana/tailscale-cloudflare-dnssync:main
    container_name: tailscale-cloudflare-dnssync
    env_file:
      - tailscale-cloudflare-dnssync.env
    environment:
      - PUID=1000
      - PGID=994
    restart: unless-stopped

  postgres-14:
    image: postgres:14
    container_name: postgres-14
    restart: unless-stopped
    env_file:
      - postgres-14.env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - /data_alt/postgres-14:/var/lib/postgresql/data
      - /var/run/postgresql:/var/run/postgresql
  
  postgres:
    image: postgres:17
    container_name: postgres
    restart: unless-stopped
    env_file:
      - postgres.env
    # ports:
    #   - 127.0.0.1:5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - /data_alt/postgres:/var/lib/postgresql/data
    networks:
      - my-net
  gitea:
    image: gitea/gitea:nightly
    container_name: gitea
    restart: unless-stopped
    ports:
      - 0.0.0.0:22:22
    environment:
      - USER_UID=103
      - USER_GID=113
      - GITEA__SERVICE__DISABLE_REGISTRATION=false
      - GITEA__SERVICE__ENABLE_BASIC_AUTHENTICATION=false
      - GITEA__SERVICE__ENABLE_PASSWORD_SIGNIN_FORM=false
      - GITEA__SERVICE__ALLOW_ONLY_EXTERNAL_REGISTRATION=true
      - GITEA__OAUTH2_CLIENT__ENABLE_AUTO_REGISTRATION=true
      - GITEA__OPENID__ENABLE_OPENID_SIGNIN=false
    volumes:
      - /data_alt/gitea:/data
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    labels: 
      - "traefik.enable=true"
      - "traefik.http.routers.gitea.rule=Host(`git.${MAIN_DOMAIN}`)"
      - "traefik.http.routers.gitea.entrypoints=websecure"
      - "traefik.http.routers.gitea.tls.certresolver=cloudflare_main"
      - "traefik.http.services.gitea.loadbalancer.server.port=3000"
    networks:
      - my-net
    depends_on:
      - postgres
  redis:
    container_name: redis
    image: docker.io/library/redis:alpine
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - /data_alt/redis:/data
    networks:
      - my-net

# TODO: add thanos
  prometheus:
    container_name: prometheus
    image: quay.io/prometheus/prometheus
    restart: unless-stopped
    user: 1000:1000
    volumes:
      - /data/prometheus:/etc/prometheus
      - /data_alt/prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - my-net
    extra_hosts:
      - "host.docker.internal:host-gateway"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.internal.${MAIN_DOMAIN}`)"
      - "traefik.http.routers.prometheus.entrypoints=websecure"
      - "traefik.http.routers.prometheus.tls.certresolver=cloudflare_main"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
      - "traefik.http.routers.prometheus.middlewares=tailscaleAL"
      - homepage.group=Main
      - homepage.name=Prometheus
      - homepage.icon=prometheus.png
      - homepage.description=Prometheus
      - homepage.href=https://prometheus.internal.${MAIN_DOMAIN}
      - homepage.widget.type=prometheus
      - homepage.widget.url=https://prometheus.internal.${MAIN_DOMAIN}

  influxdb:
    image: influxdb:2.2
    container_name: influxdb
    volumes:
      - '/data_alt/influxdb:/var/lib/influxdb2'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/health"]
      interval: 5s
      timeout: 10s
      retries: 20
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.influxdb.rule=Host(`influxdb.internal.${MAIN_DOMAIN}`)"
      - "traefik.http.routers.influxdb.entrypoints=websecure"
      - "traefik.http.routers.influxdb.tls.certresolver=cloudflare_main"
      - "traefik.http.services.influxdb.loadbalancer.server.port=8086"
      - "traefik.http.routers.influxdb.middlewares=tailscaleAL"
    networks:
      - my-net

  scrutiny-web:
    image: 'ghcr.io/analogj/scrutiny:master-web'
    container_name: scrutiny-web
    volumes:
      - '/data/scrutiny:/opt/scrutiny/config'
    environment:
      - SCRUTINY_WEB_INFLUXDB_HOST=influxdb
      # - SCRUTINY_WEB_INFLUXDB_TOKEN=your-very-secret-token
      # - SCRUTINY_WEB_INFLUXDB_ORG=homelab
      # - SCRUTINY_WEB_INFLUXDB_BUCKET=scrutiny
      #TODO: add a notification system (maybe ?)
      #- SCRUTINY_NOTIFY_URLS=["http://gotify:80/message?token=a-gotify-token"]
    env_file:
      - scrutiny.env
    depends_on:
      influxdb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 5s
      timeout: 10s
      retries: 20
      start_period: 10s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.scrutiny.rule=Host(`scrutiny.internal.${MAIN_DOMAIN}`)"
      - "traefik.http.routers.scrutiny.entrypoints=websecure"
      - "traefik.http.routers.scrutiny.tls.certresolver=cloudflare_main"
      - "traefik.http.services.scrutiny.loadbalancer.server.port=8080"
      - "traefik.http.routers.scrutiny.middlewares=tailscaleAL"
      - homepage.group=Main
      - homepage.name=Scrutiny
      - homepage.icon=scrutiny.png
      - homepage.href=https://scrutiny.internal.${MAIN_DOMAIN}
      - homepage.description=Scrutiny
      - homepage.widget.type=scrutiny
      - homepage.widget.url=https://scrutiny.internal.${MAIN_DOMAIN}
    networks:
      - my-net

  redbot:
    container_name: redbot
    image: ghcr.io/lifeismana/docker-red-discordbot:full
    restart: unless-stopped
    volumes:
      - /data_alt/redbot:/data
      - /data_alt/.ssh/red_github/:/config/.ssh/
      - /data_alt/.pylav-red/pylav.yaml:/config/pylav.yaml
      - /var/run/postgresql:/var/run/postgresql
      - /data_alt/.pylav-red/PyLav:/config/.config/PyLav     
    environment:
      - CUSTOM_REDBOT_PACKAGE=git+https://github.com/Cog-Creators/Red-DiscordBot.git@V3/develop#egg=Red-DiscordBot
      - TZ=Europe/Paris
      - EXTRA_ARGS=--dev --rpc #--mentionable
    depends_on:
      - postgres-14
    network_mode: host
  red-dashboard:
    container_name: red-dashboard
    image: ghcr.io/lifeismana/docker-red-dashboard:latest
    restart: unless-stopped
    labels: 
      - "traefik.enable=true"
      - "traefik.http.routers.reddash.rule=Host(`red-dashboard.${MAIN_DOMAIN}`)"
      - "traefik.http.routers.reddash.entrypoints=websecure"
      - "traefik.http.routers.reddash.tls.certresolver=cloudflare_main"
      - "traefik.http.services.reddash.loadbalancer.server.port=42356"
    network_mode: host
    command: ["bash", "-c", "source ~/reddashenv/bin/activate;reddash --host=0.0.0.0"]

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    restart: unless-stopped
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ORG_NAME=Lifesismana
      - GF_RENDERING_SERVER_URL=http://renderer:8081/render
      - GF_RENDERING_CALLBACK_URL=http://grafana:3000/
      - GF_INSTALL_PLUGINS=marcusolsson-calendar-panel
    user: 1000:1000
    volumes:
      - /data/grafana:/var/lib/grafana
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.internal.${MAIN_DOMAIN}`)"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls.certresolver=cloudflare_main"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
      - "traefik.http.routers.grafana.middlewares=tailscaleAL"
      - homepage.group=Main
      - homepage.name=Grafana
      - homepage.icon=grafana.png
      - homepage.description=Grafana
      - homepage.widget.type=grafana
      - homepage.widget.url=https://grafana.internal.${MAIN_DOMAIN}
      - homepage.widget.username=${GRAFANA_USER}
      - homepage.widget.password=${GRAFANA_PASSWORD}
    networks:
      - my-net     
  renderer:
    container_name: grafana-renderer
    image: grafana/grafana-image-renderer:latest
    restart: unless-stopped
    depends_on: 
      - grafana
    networks:
      - my-net 

  asf:
    container_name: asf
    image: justarchi/archisteamfarm:released
    command: --cryptkey-file /app/config/key
    environment:
      - TZ=Europe/Paris
    volumes:
      - /data/asf/config:/app/config
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.asf.rule=Host(`asf.internal.${MAIN_DOMAIN}`)"
      - "traefik.http.routers.asf.entrypoints=websecure"
      - "traefik.http.routers.asf.tls.certresolver=cloudflare_main"
      - "traefik.http.routers.asf.middlewares=tailscaleAL"
    networks:
      - my-net

  steam-watcher:
    container_name: steam-watcher
    image: ghcr.io/lifeismana/steam-watcher:latest
    restart: unless-stopped
    environment:
      - TZ=Europe/Paris
    volumes:
      - /data/steam-watcher:/usr/src/app/config/
    networks:
      - my-net

  # myfeedcord:
  #   image: qolors/feedcord:latest # for amd64 architecture
  #   # image: qolors/feedcord:latest-arm64  # For arm64 architecture (Uncomment this line and comment the above if using arm64)
  #   container_name: feedcord
  #   restart: unless-stopped
  #   volumes:
  #     - /data/discord-rss/:/app/config/
  #   networks:
  #     - my-net
      
  rss-forwarder:
    image: ghcr.io/morphy2k/rss-forwarder:latest
    container_name: rss-forwarder
    restart: unless-stopped
    volumes:
      - /data/rss-forwarder:/data
    environment:
      - TZ=Europe/Paris
    networks:
      - my-net

  couchdb:
    image: couchdb:latest
    container_name: obsidian-livesync
    user: 1000:1000
    env_file:
      - obsidian-livesync.env
    restart: unless-stopped
    volumes:
      - /data/obsidian-livesync:/opt/couchdb/data
    networks:
      - my-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.obsidian-livesync.rule=Host(`obsidian-livesync.internal.${MAIN_DOMAIN}`)"
      - "traefik.http.routers.obsidian-livesync.entrypoints=websecure"
      - "traefik.http.routers.obsidian-livesync.tls.certresolver=cloudflare_main"
      - "traefik.http.services.obsidian-livesync.loadbalancer.server.port=5984"
      - "traefik.http.routers.obsidian-livesync.middlewares=tailscaleAL"
      - "traefik.http.middlewares.obsidiancors.headers.accesscontrolallowmethods=GET,PUT,POST,HEAD,DELETE"
      - "traefik.http.middlewares.obsidiancors.headers.accesscontrolallowheaders=accept,authorization,content-type,origin,referer"
      - "traefik.http.middlewares.obsidiancors.headers.accesscontrolalloworiginlist=app://obsidian.md,capacitor://localhost,http://localhost"
      - "traefik.http.middlewares.obsidiancors.headers.accesscontrolmaxage=3600"
      - "traefik.http.middlewares.obsidiancors.headers.addvaryheader=true"
      - "traefik.http.middlewares.obsidiancors.headers.accessControlAllowCredentials=true"


  authentik-server:
    container_name: authentik-server
    image: ghcr.io/goauthentik/server:2025.2.3
    restart: unless-stopped
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgres
      AUTHENTIK_POSTGRESQL__USER: authentik
      AUTHENTIK_POSTGRESQL__NAME: authentikdb
      AUTHENTIK_COOKIE_DOMAIN: ${MAIN_DOMAIN}
    env_file:
      - authentik.env
    labels:
      - "traefik.enable=true"
      # arf est-ce que j'ai vraiment pas moyens de le restreindre mieux que ça ?
      # && ! PathPrefix(`/if/admin/`)
      - "traefik.http.routers.authentik.rule=Host(`authentik.${MAIN_DOMAIN}`) || HostRegexp(`{subdomain:[a-z0-9-]+}.${MAIN_DOMAIN}`) && PathPrefix(`/outpost.goauthentik.io/`)"
      - "traefik.http.routers.authentik.entrypoints=websecure"
      - "traefik.http.routers.authentik.tls.certresolver=cloudflare_main"
      - "traefik.http.routers.authentik.service=authentik"
      - "traefik.http.services.authentik.loadbalancer.server.port=9000"
      - "traefik.http.middlewares.forwardAuth-authentik.forwardauth.address=https://authentik.${MAIN_DOMAIN}/outpost.goauthentik.io/auth/traefik"
      - "traefik.http.middlewares.forwardAuth-authentik.forwardauth.trustForwardHeader=true"
      - "traefik.http.middlewares.forwardAuth-authentik.forwardauth.authResponseHeaders=X-authentik-username,X-authentik-groups,X-authentik-email,X-authentik-name,X-authentik-uid,X-authentik-jwt,X-authentik-meta-jwks,X-authentik-meta-outpost,X-authentik-meta-provider,X-authentik-meta-app,X-authentik-meta-version"
      - homepage.group=Main
      - homepage.name=Authentik
      - homepage.icon=authentik.png
      - homepage.description=Authentik
      - homepage.href=https://authentik.${MAIN_DOMAIN}
      - homepage.widget.type=authentik
      - homepage.widget.url=https://authentik.${MAIN_DOMAIN}
      - homepage.widget.key=${AUTHENTIK_TOKEN}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - my-net
  authentik-worker:
    container_name: authentik-worker
    image: ghcr.io/goauthentik/server:2025.2.3
    restart: unless-stopped
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgres
      AUTHENTIK_POSTGRESQL__USER: authentik
      AUTHENTIK_POSTGRESQL__NAME: authentikdb
    env_file:
      - authentik.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - my-net

networks:
  my-net:
    name: my-net
    driver: bridge